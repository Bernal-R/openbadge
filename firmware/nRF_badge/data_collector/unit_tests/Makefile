# A modified version of the sample Makefile for building Google Tests.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

#                     ***** IMPORTANT INSTRUCTIONS *****
# To add a new unit test (and please unit test what you can of your code!), you must:
#    1) Create the new test file ('.cc' for C++, not '.c' for C) in the tests/ folder.
#    2) Add the new test's name to the TESTS variable below and any new tested firmware code to TESTED_CODE.
#    3) Mock out any new modules you need to in mock/ by creating the necessary .cc files.

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = flash_layout_utils_unittest  \
        flash_unittest               \
        vaint_utils_unittest         \
        audio_chunks_unittest        \
        badge_fs_unittest            \
        comm_protocol_unittest       \
        request_handler_unittest       \

# All the files that must be built out of the firmware for our tests to work.
TESTED_CODE = $(FIRMWARE_DIR)/incl/audio_chunks.c              \
              $(FIRMWARE_DIR)/incl/proximity_chunks.c          \
              $(FIRMWARE_DIR)/incl/badge_fs.c                  \
              $(FIRMWARE_DIR)/incl/comm_protocol.c             \
              $(FIRMWARE_DIR)/incl/flash_layout_utils.c        \
              $(FIRMWARE_DIR)/incl/flash.c                     \
              $(FIRMWARE_DIR)/incl/app_fifo_util.c             \
              $(FIRMWARE_DIR)/incl/vaint_utils.c               \
              $(SDK_PATH)/components/libraries/fifo/app_fifo.c \

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = googletest

# Where to find test code.
TEST_DIR = tests

# Where to find test mocks
MOCK_DIR = mock

# Where to find the firmware
FIRMWARE_DIR = ..

MOCK_INC_PATHS += -I$(MOCK_DIR)

INC_PATHS += -I$(FIRMWARE_DIR)/config
INC_PATHS += -I$(FIRMWARE_DIR)/incl

MOCKS = $(shell find $(MOCK_DIR) -name '*.c*')

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread
CXXFLAGS += -DBOARD_CUSTOM
CXXFLAGS += -DBOARD_BADGE_03V4
CXXFLAGS += -DDEBUG_LOG_ENABLE
CXXFLAGS += -DDEBUG
CXXFLAGS += -DUNITTEST

TEST_OBJECTS = $(addsuffix .o, $(TESTS))
TEST_SOURCE = $(addsuffix .cc, $(addprefix $(TEST_DIR)/, $(TESTS)))

TESTED_FILES = $(notdir $(TESTED_CODE))
TESTED_OBJECTS = $(TESTED_FILES:.c=.o)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : clean $(TESTS) run_tests

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

run_tests :
	$(addprefix bin/, $(TESTS))

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) build/$@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TEST_OBJECTS):
	$(CXX) $(CPPFLAGS) $(MOCK_INC_PATHS) $(INC_PATHS) $(CXXFLAGS) -c $(TEST_SOURCE)

$(TESTED_OBJECTS): $(TEST_OBJECTS)
	$(CXX) $(CPPFLAGS) $(MOCK_INC_PATHS) $(INC_PATHS) $(CXXFLAGS) -c $(TESTED_CODE)

$(TESTS): $(TESTED_OBJECTS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(MOCKS) $(MOCK_INC_PATHS) $(INC_PATHS) -lpthread $(TEST_OBJECTS) $(TESTED_OBJECTS) gtest_main.a -o bin/$@